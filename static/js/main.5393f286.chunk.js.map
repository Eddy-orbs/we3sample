{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","provider","window","ethereum","web3","Web3","isStatus","console","log","isMetaMask","eth","getAccounts","then","accounts","defaultAccount","addEventListener","a","error","className","href","onClick","e","enable","preventDefault","alert","title","account","sendTransaction","from","to","value","gas","receipt","transactionHash","catch","err","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kYAqFeA,MAlFf,WACE,IAAIC,EAAYC,OAAeC,SAC3BC,EAAO,IAAIC,IAAKJ,GAkCpB,OAhCIA,EAASK,SACXC,QAAQC,IAAI,SACHP,EAASQ,WAClBF,QAAQC,IAAI,qBAEZD,QAAQC,IAAI,eAGdJ,EAAKM,IAAIC,cAAcC,MAAK,SAAAC,GAC1BT,EAAKM,IAAII,eAAiBD,EAAS,MAGrCX,OAAOa,iBAAiB,OAAxB,sBAAgC,sBAAAC,EAAA,sDAG9B,IAKIT,QAAQC,IAAI,iBAERJ,EAAKM,IAAII,gBACXP,QAAQC,IAAI,SAAUJ,EAAKM,IAAII,gBAGnC,MAAOG,GAELV,QAAQC,IAAI,iBAhBc,4CAqB9B,yBAAKU,UAAU,OACb,2BACE,uBAAGC,KAAK,IAAIC,QAAS,SAASC,GACZnB,OAAeC,SACtBmB,SACTD,EAAEE,mBAHJ,qBAMF,2BAEA,uBAAGJ,KAAK,IAAIC,QAAS,SAASC,GAC1Bd,QAAQC,IAAIJ,EAAKM,IAAII,gBACrBU,MAAMpB,EAAKM,IAAII,kBAFnB,yBAOA,2BACE,4BAAQW,MAAM,SAASL,QAAS,SAASC,GACvC,IACIK,EAAUtB,EAAKM,IAAII,eACvBP,QAAQC,IAAIJ,EAAKM,IAAII,gBACrBU,MAAME,GAEFA,EACFtB,EAAKM,IAAIiB,gBAAgB,CACvBC,KAAMF,EACNG,GAAI,6CACJC,MAAO,mBACPC,IAVW,OAWVnB,MAAK,SAAAoB,GACNzB,QAAQC,IAAKwB,EAAgBC,oBAC5BC,OAAM,SAASC,GAChB5B,QAAQU,MAAMkB,MAGhB5B,QAAQC,IAAI,cAEda,EAAEE,mBApBJ,uBC9CYa,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdf,OAAM,SAAAjB,GACLV,QAAQU,MAAMA,EAAMiC,c","file":"static/js/main.5393f286.chunk.js","sourcesContent":["import React from 'react';\nimport Web3 from 'web3';\n\nfunction App() {\n  var provider = (window as any).ethereum;\n  var web3 = new Web3(provider);\n\n  if (provider.isStatus) {\n    console.log(\"kimed\");\n  } else if (provider.isMetaMask) {\n    console.log(\"provider Metamask\");\n  } else {\n    console.log(\"no provider\");\n  }\n\n  web3.eth.getAccounts().then(accounts => {\n    web3.eth.defaultAccount = accounts[0];\n  });\n\n  window.addEventListener('load', async () => {\n    // Read-only provider is exposed by default\n    //console.log(await provider.send('net_version'));\n    try {\n        // Request full provider if needed\n        //await provider.enable();\n        // Full provider exposed\n        //await provider.send('eth_sendTransaction', [/* ... */]);\n        console.log(\"user accepted\");\n\n        if (web3.eth.defaultAccount) {\n          console.log(\"kimed3\", web3.eth.defaultAccount);\n        }\n      \n    } catch (error) {\n        // User denied full provider access\n        console.log(\"user rejected\");\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <p>\n        <a href=\".\" onClick={function(e){\n          var provider = (window as any).ethereum;\n          provider.enable();\n          e.preventDefault();\n        }}>click to connect</a>\n      </p>\n      <p>\n\n      <a href=\".\" onClick={function(e){\n          console.log(web3.eth.defaultAccount);\n          alert(web3.eth.defaultAccount);\n          //e.preventDefault();\n        }}>click to see address</a>\n      </p>\n\n      <p>\n        <button title=\"sendTx\" onClick={function(e){\n          var gasLimit = '15';\n          var account = web3.eth.defaultAccount;\n          console.log(web3.eth.defaultAccount);\n          alert(account);\n\n          if (account) {\n            web3.eth.sendTransaction({\n              from: account,\n              to: '0x170FDc6C3d4bc047e6Eab8e076FE9921557e551F',\n              value: '1000000000000000',\n              gas: gasLimit // use web3.eth.estimateGas() to get this amount, and add a little for extra safety.\n            }).then(receipt => {\n              console.log((receipt as any).transactionHash); // \"0xe7991ac8107a2dd70f996ea0cd867a828b2f228b39436506271d6a53587eff16\"\n            }).catch(function(err){\n              console.error(err);\n            });\n          } else {\n            console.log('no account');\n          }\n          e.preventDefault();\n        }}>send Transaction</button>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}